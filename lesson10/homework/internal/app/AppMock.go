// Code generated by mockery v2.26.1. DO NOT EDIT.

package app

import (
	context "context"
	ads "homework9/internal/ads"
	"log"

	mock "github.com/stretchr/testify/mock"

	users "homework9/internal/users"
)

// AppMock is an autogenerated mock type for the AppMock type
type AppMock struct {
	mock.Mock
}



// ChangeAdStatus provides a mock function with given fields: ctx, adId, userId, published
func (_m *AppMock) ChangeAdStatus(ctx context.Context, adId int64, userId int64, published bool) (ads.Ad, error) {
	ret := _m.Called(ctx, adId, userId, published)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, bool) (ads.Ad, error)); ok {
		return rf(ctx, adId, userId, published)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, bool) ads.Ad); ok {
		r0 = rf(ctx, adId, userId, published)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, bool) error); ok {
		r1 = rf(ctx, adId, userId, published)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAd provides a mock function with given fields: ctx, title, text, userId
func (_m *AppMock) CreateAd(ctx context.Context, title string, text string, userId int64) (ads.Ad, error) {
	ret := _m.Called(ctx, title, text, userId)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) (ads.Ad, error)); ok {
		return rf(ctx, title, text, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) ads.Ad); ok {
		r0 = rf(ctx, title, text, userId)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(ctx, title, text, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, nickname, email
func (_m *AppMock) CreateUser(ctx context.Context, nickname string, email string) (users.User, error) {
	log.Println("before call")
	ret := _m.Called(ctx, nickname, email)

	log.Println("after call")
	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (users.User, error)); ok {
		return rf(ctx, nickname, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) users.User); ok {
		r0 = rf(ctx, nickname, email)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, nickname, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdById provides a mock function with given fields: ctx, adId, userId
func (_m *AppMock) GetAdById(ctx context.Context, adId int64, userId int64) (ads.Ad, error) {
	ret := _m.Called(ctx, adId, userId)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (ads.Ad, error)); ok {
		return rf(ctx, adId, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ads.Ad); ok {
		r0 = rf(ctx, adId, userId)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, adId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userId
func (_m *AppMock) GetUser(ctx context.Context, userId int64) (users.User, error) {
	ret := _m.Called(ctx, userId)

	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (users.User, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) users.User); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAds provides a mock function with given fields: ctx
func (_m *AppMock) ListAds(ctx context.Context) []ads.Ad {
	ret := _m.Called(ctx)

	var r0 []ads.Ad
	if rf, ok := ret.Get(0).(func(context.Context) []ads.Ad); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ads.Ad)
		}
	}

	return r0
}

// RemoveAd provides a mock function with given fields: ctx, adId, userId
func (_m *AppMock) RemoveAd(ctx context.Context, adId int64, userId int64) (ads.Ad, error) {
	ret := _m.Called(ctx, adId, userId)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (ads.Ad, error)); ok {
		return rf(ctx, adId, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ads.Ad); ok {
		r0 = rf(ctx, adId, userId)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, adId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUser provides a mock function with given fields: ctx, userId
func (_m *AppMock) RemoveUser(ctx context.Context, userId int64) (users.User, error) {
	ret := _m.Called(ctx, userId)

	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (users.User, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) users.User); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAd provides a mock function with given fields: ctx, adId, userId, title, text
func (_m *AppMock) UpdateAd(ctx context.Context, adId int64, userId int64, title string, text string) (ads.Ad, error) {
	ret := _m.Called(ctx, adId, userId, title, text)

	var r0 ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) (ads.Ad, error)); ok {
		return rf(ctx, adId, userId, title, text)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) ads.Ad); ok {
		r0 = rf(ctx, adId, userId, title, text)
	} else {
		r0 = ret.Get(0).(ads.Ad)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string, string) error); ok {
		r1 = rf(ctx, adId, userId, title, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, userId, nickname, m
func (_m *AppMock) UpdateUser(ctx context.Context, userId int64, nickname string, m Method) (users.User, error) {
	ret := _m.Called(ctx, userId, nickname, m)

	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, Method) (users.User, error)); ok {
		return rf(ctx, userId, nickname, m)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, Method) users.User); ok {
		r0 = rf(ctx, userId, nickname, m)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, Method) error); ok {
		r1 = rf(ctx, userId, nickname, m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// access provides a mock function with given fields: adId, userId
func (_m *AppMock) access(adId int64, userId int64) error {
	ret := _m.Called(adId, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(adId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAppMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewAppMock creates a new instance of AppMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAppMockFromMock(t mockConstructorTestingTNewAppMock) *AppMock {
	mock := &AppMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
